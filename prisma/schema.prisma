










// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Key Domain Objects
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String?
  firstName     String?
  lastName      String?
  role          Role     @default(guest)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  hostProfile    HostProfile?
  guestProfile   GuestProfile?

  bookings       Booking[]
}

enum Role {
  guest
  host
  admin
}

model HostProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  vehicles      Vehicle[]
}

model GuestProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  bookings      Booking[]
}

model Vehicle {
  id            String   @id @default(cuid())
  make          String
  model         String
  year          Int
  licensePlate  String?   @unique
  vin           String    @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  hostProfileId String
  hostProfile   HostProfile @relation(fields: [hostProfileId], references: [id])

  photos        VehiclePhoto[]
  telematicsDevice TelematicsDevice?

  listings      Listing[]
}

model VehiclePhoto {
  id            String   @id @default(cuid())
  vehicleId     String
  vehicle       Vehicle  @relation(fields: [vehicleId], references: [id])
  url           String
  createdAt     DateTime @default(now())

  // Metadata for photo validation
  width         Int?
  height        Int?
}

model TelematicsDevice {
  id            String   @id @default(cuid())
  vehicleId     String?   @unique
  vehicle       Vehicle?  @relation(fields: [vehicleId], references: [id])
  deviceId      String    @unique
  createdAt     DateTime @default(now())

  // Device-specific data
  make          String?
  model         String?
}

model Airport {
  id            String   @id @default(cuid())
  name          String
  code          String   @unique
  country       String

  permits       AirportPermit[]
  zones         AirportZone[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AirportPermit {
  id            String   @id @default(cuid())
  airportId     String
  airport       Airport  @relation(fields: [airportId], references: [id])
  permitNumber  String

  createdAt     DateTime @default(now())

  // Permit validity period
  validFrom     DateTime?
  validTo       DateTime?

  zones         AirportZone[]
}

model AirportZone {
  id            String   @id @default(cuid())
  airportId     String
  airport       Airport  @relation(fields: [airportId], references: [id])
  name          String

  // Geographical coordinates (simplified)
  latitude      Float
  longitude     Float

  permitIds     String[]
}

model Listing {
  id            String   @id @default(cuid())
  vehicleId     String
  vehicle       Vehicle  @relation(fields: [vehicleId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  availabilityWindows AvailabilityWindow[]
  priceRules    PriceRule[]

  bookings      Booking[]
}

model AvailabilityWindow {
  id            String   @id @default(cuid())
  listingId     String
  listing       Listing  @relation(fields: [listingId], references: [id])
  startDate     DateTime
  endDate       DateTime

  // Price adjustments for this window
  basePricePerDay Decimal(10, 2)
}

model PriceRule {
  id            String   @id @default(cuid())
  listingId     String
  listing       Listing  @relation(fields: [listingId], references: [id])

  ruleType      RuleType

  // Rule-specific data
  minDurationDays Int?
  maxDurationDays Int?

  discountPercent Decimal(5, 2)?
}

enum RuleType {
  MIN_DURATION
  MAX_DURATION
  DISCOUNT_PERCENTAGE
}

model Booking {
  id            String   @id @default(cuid())
  listingId     String
  listing       Listing  @relation(fields: [listingId], references: [id])
  guestProfileId String?
  guestProfile GuestProfile? @relation(fields: [guestProfileId], references: [id])

  startDate     DateTime
  endDate       DateTime

  totalPrice    Decimal(10, 2)
  depositAmount Decimal(10, 2)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  checkpoints   Checkpoint[]
  claims        Claim[]

  // Payment and risk information
  riskScore     Int?
}

model Checkpoint {
  id            String   @id @default(cuid())
  bookingId     String
  booking       Booking  @relation(fields: [bookingId], references: [id])
  checkpointType CheckpointType

  createdAt     DateTime @default(now())

  // Check-in/out data
  latitude      Float?
  longitude     Float?

  photos        Photo[]
}

enum CheckpointType {
  CHECK_IN
  CHECK_OUT
}

model Photo {
  id            String   @id @default(cuid())
  checkpointId  String
  checkpoint    Checkpoint @relation(fields: [checkpointId], references: [id])
  url           String

  createdAt     DateTime @default(now())

  // Metadata for photo validation
  width         Int?
  height        Int?
}

model Claim {
  id            String   @id @default(cuid())
  bookingId     String
  booking       Booking  @relation(fields: [bookingId], references: [id])
  createdAt     DateTime @default(now())

  description   String
  status        ClaimStatus

  photos        Photo[]
}

enum ClaimStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  DENIED
}

model ProtectionPlan {
  id            String   @id @default(cuid())
  name          String
  description   String
  hostTakeRate  Decimal(5, 2) // e.g., 0.75 for 75%
  deductible    Decimal(10, 2)

  createdAt     DateTime @default(now())

  payoutAccounts PayoutAccount[]
}

model PayoutAccount {
  id            String   @id @default(cuid())
  hostId        String
  protectionPlanId String

  bankName      String
  accountNumber String
  routingNumber String?

  createdAt     DateTime @default(now())
}

model Transfer {
  id            String   @id @default(cuid())
  payoutAccountId String
  amount         Decimal(10, 2)
  currency       String

  createdAt     DateTime @default(now())

  // Transfer metadata
  reference     String?
}

model Charge {
  id            String   @id @default(cuid())
  bookingId     String?   // Nullable for system-generated charges (e.g., airport fees)
  amount        Decimal(10, 2)
  currency      String    @default("USD")
  chargeType    ChargeType

  createdAt     DateTime @default(now())

  description   String?
}

enum ChargeType {
  DEPOSIT
  PAYMENT
  REFUND
  AIRPORT_FEE
  CLEANING_FEE
  TOLL_CHARGE
}

model Deposit {
  id            String   @id @default(cuid())
  bookingId     String
  amount        Decimal(10, 2)
  currency      String    @default("USD")
  status        DepositStatus

  createdAt     DateTime @default(now())

  // Risk assessment data
  riskScore     Int?
}

enum DepositStatus {
  PENDING
  HELD
  REFUNDED
  DISPUTED
}

model RiskAssessment {
  id            String   @id @default(cuid())
  bookingId     String?   // Can be trip-specific or driver-specific
  riskBand      RiskBand

  createdAt     DateTime @default(now())

  // Features used for assessment
  age           Int?
  mvrSignal     Boolean?

  // Calculated values
  suggestedDeposit Decimal(10, 2)
  priceMultiplier Decimal(3, 2)

  deposit       Deposit?   @relation(fields: [depositId], references: [id])
}

enum RiskBand {
  LOW
  MEDIUM
  HIGH
}

